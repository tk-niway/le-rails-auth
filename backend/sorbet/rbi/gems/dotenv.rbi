# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dotenv/all/dotenv.rbi
#
# dotenv-3.1.0

module Dotenv
  def instrument(name, payload = nil, &block); end
  def instrumenter; end
  def instrumenter=(arg0); end
  def load!(*filenames); end
  def load(*filenames, overwrite: nil, ignore: nil); end
  def modify(env = nil, &block); end
  def overload!(*filenames); end
  def overload(*filenames); end
  def overwrite!(*filenames); end
  def overwrite(*filenames); end
  def parse(*filenames, overwrite: nil, ignore: nil, &block); end
  def require_keys(*keys); end
  def restore(env = nil, safe: nil); end
  def save; end
  def update(env = nil, overwrite: nil); end
  extend Dotenv
end
module Dotenv::Substitutions
end
module Dotenv::Substitutions::Variable
  def self.call(value, env, overwrite: nil); end
  def self.substitute(match, variable, env); end
end
module Dotenv::Substitutions::Command
  def self.call(value, _env, overwrite: nil); end
end
class Dotenv::FormatError < SyntaxError
end
class Dotenv::Parser
  def call; end
  def expand_newlines(value); end
  def initialize(string, overwrite: nil); end
  def parse_line(line); end
  def parse_value(value); end
  def perform_substitutions(value, maybe_quote); end
  def self.call(*, **, &); end
  def self.substitutions; end
  def unescape_characters(value); end
  def unescape_value(value, maybe_quote); end
  def variable_not_set?(line); end
end
class Dotenv::Environment < Hash
  def filename; end
  def initialize(filename, overwrite: nil); end
  def load; end
  def overwrite; end
  def read; end
end
class Dotenv::Error < StandardError
end
class Dotenv::MissingKeys < Dotenv::Error
  def initialize(keys); end
end
class Dotenv::Diff
  def a; end
  def added; end
  def any?; end
  def b; end
  def changed; end
  def env; end
  def initialize(a: nil, b: nil, &block); end
  def removed; end
  def snapshot; end
end
class Dotenv::ReplayLogger < Logger
  def add(*args, &block); end
  def initialize; end
  def replay(logger); end
end
class Dotenv::LogSubscriber < ActiveSupport::LogSubscriber
end
class Dotenv::Rails < Rails::Railtie
  def autorestore(*, **, &); end
  def autorestore=(arg); end
  def deprecator; end
  def env; end
  def files(*, **, &); end
  def files=(arg); end
  def initialize; end
  def load; end
  def logger(*, **, &); end
  def logger=(new_logger); end
  def overload; end
  def overwrite(*, **, &); end
  def overwrite=(arg); end
  def root; end
  def self.load; end
end
module Dotenv::Railtie
end
